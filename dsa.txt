
//program for single linked list---------------------------------------------------

#include <stdio.h>
#include <stdlib.h>

struct Node{
  int value;
  struct Node* next;
};

typedef struct Node n;

n *head = NULL;


n* createNode(int val){
    n* newnode;
    newnode = (n*)malloc(sizeof(n));
    newnode->next = NULL;
    newnode->value = val;
    return newnode;
}

int insertAtBeg(int val){
    n* newnode = createNode(val);
    if (head == NULL){
        head = newnode;
        return 0;
    }
    newnode->next = head;
    head = newnode;
    return 0;
    }
    
    
int insertAtEnd(int val){
    n* newnode = createNode(val);
    if (head == NULL){
        head = newnode;
        return 0;
    }
    n* temp = head;

    while (temp->next != NULL )
    {
        temp = temp->next;
    }
    temp->next = newnode;
    return 0;
    }
    
    
    
int deleteAtBeg(){
   
    if (head == NULL){
        printf("I am Empty");
        return 0;
    }
    n* temp = head;
    head = head->next;
    free(temp);
    
    return 0;
    }
    
int deleteAtPos(int pos){
   
    if (head == NULL){
        printf("I am Empty");
        return 0;
    }
    
    n* temp = head;

    for (int i = 1 ; i < pos-1 && temp != NULL; i++){
        temp = temp->next;
    }
    n* temp1 = temp->next;
    temp->next = temp->next->next;
    free(temp1);
    
    return 0;
    }
    
    
    
int deleteAtEnd(){
   
    if (head == NULL){
        printf("I am Empty");
        return 0;
    }
    
    if (head->next == NULL){
        deleteAtBeg();
        return 0;
    }
    
    n* temp = head;

    while ( temp->next->next != NULL){
        temp = temp->next;
    }
    n* temp1 = temp->next;
    temp->next = NULL;
    free(temp1);
    
    return 0;
    }
    
    
int insertAtPos(int val , int pos){
    n* newnode = createNode(val);
    if (pos == 1){
        insertAtBeg(val);
        return 0;
    }
    n *temp = head;
    for (int i = 1 ; i < pos-1 && temp != NULL; i++){
        temp = temp->next;
    }
    newnode->next = temp->next;
    temp->next = newnode;
    return 0;
    }


int display (){
    n *temp = head;
    
    if(temp == NULL){
        printf("I am empty");
    }
    while(temp != NULL){
        printf("%d->",temp->value);
        temp = temp->next;
    }
    return 0;
}

int main() {
    insertAtBeg(30);
    insertAtBeg(350);
    insertAtBeg(10);
    insertAtBeg(40);
    insertAtPos(40,2);
    deleteAtPos(3);
    deleteAtBeg();
    insertAtEnd(99);
    deleteAtEnd();
    
    display();
    return 0;
}


//program for doubly linked list---------------------------------------------------

#include <stdio.h>
#include <stdlib.h>

struct Node{
  int value;
  struct Node* next;
  struct Node* prev;
  
};

typedef struct Node n;

n *head = NULL;


n* createNode(int val){
    n* newnode;
    newnode = (n*)malloc(sizeof(n));
    newnode->next = NULL;
    newnode->prev = NULL;
    newnode->value = val;
    return newnode;
}

int insertAtBeg(int val){
    n* newnode = createNode(val);
    if (head == NULL){
        head = newnode;
        return 0;
    }
    newnode->next = head;
    head->prev = newnode;
    head = newnode;
    return 0;
    }
    
int insertAtPos(int val , int pos){
    n* newnode = createNode(val);
    if (pos == 1){
        insertAtBeg(val);
        return 0;
    }
    n *temp = head;
    for (int i = 1 ; i < pos-1 && temp != NULL; i++){
        temp = temp->next;
    }
    newnode->next = temp->next;
    temp->next = newnode;
    newnode->prev = temp;
    newnode->next->prev = newnode;
    return 0;
    }
    
    
int insertAtEnd(int val){
    n* newnode = createNode(val);
    if (head == NULL){
        head = newnode;
        return 0;
    }
    n* temp = head;

    while (temp->next != NULL )
    {
        temp = temp->next;
    }
    temp->next = newnode;
    newnode->prev = temp;
    return 0;
    }
    
    
    
int deleteAtBeg(){
   
    if (head == NULL){
        printf("I am Empty");
        return 0;
    }
    n* temp = head;
    head = head->next;
    free(temp);
    
    return 0;
    }
    
int deleteAtPos(int pos){
   
    if (head == NULL){
        printf("I am Empty");
        return 0;
    }
    
    n* temp = head;

    for (int i = 1 ; i < pos-1 && temp != NULL; i++){
        temp = temp->next;
    }
    n* temp1 = temp->next;
    temp->next = temp->next->next;
    temp->next->prev = temp;
    free(temp1);
    
    return 0;
    }
    
    
    
int deleteAtEnd(){
   
    if (head == NULL){
        printf("I am Empty");
        return 0;
    }
    
    if (head->next == NULL){
        deleteAtBeg();
        return 0;
    }
    
    n* temp = head;

    while ( temp->next->next != NULL){
        temp = temp->next;
    }
    n* temp1 = temp->next;
    temp->next = NULL;
    free(temp1);
    
    return 0;
    }
    
    



int display (){
    n *temp = head;
    
    if(temp == NULL){
        printf("I am empty");
    }
    while(temp != NULL){
        printf("%d->",temp->value);
        temp = temp->next;
    }
    return 0;
}

int main() {
    insertAtBeg(30);
    insertAtBeg(350);
    insertAtBeg(10);
    insertAtBeg(40);
    insertAtPos(40,2);
    deleteAtPos(3);
    deleteAtBeg();
    insertAtEnd(99);
    deleteAtEnd();
    
    display();
    return 0;
}


// circular single lined list------------------------------------------------
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int value;
    struct Node* next;
};

typedef struct Node Node;

Node *head = NULL;


Node* createNode(int val) {
    Node* newnode = (Node*)malloc(sizeof(Node));
    newnode->value = val;
    newnode->next = NULL;
    return newnode;
}

void insertAtBeg(int val) {
    Node* newnode = createNode(val);
    if (head == NULL) {
        head = newnode;
        newnode->next = head;
    } else {
        newnode->next = head->next;
        head->next = newnode;
    }
}

void insertAtPos(int val, int pos) {
    Node* newnode = createNode(val);
    if (pos == 1) {
        insertAtBeg(val);
    } else {
        Node* temp = head;
        for (int i = 1; i < pos - 1 && temp->next != head; i++) {
            temp = temp->next;
        }
        newnode->next = temp->next;
        temp->next = newnode;
    }
}

void insertAtEnd(int val) {
    Node* newnode = createNode(val);
    if (head == NULL) {
        head = newnode;
        newnode->next = head;
    } else {
        Node* temp = head;
        while (temp->next != head) {
            temp = temp->next;
        }
        temp->next = newnode;
        newnode->next = head;
    }
}

void deleteAtBeg() {
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }
    Node* temp = head;
    if (head->next == head) {
        head = NULL;
    } else {
        while (temp->next != head) {
            temp = temp->next;
        }
        temp->next = head->next;
        head = head->next;
    }
    free(temp);
}

void deleteAtPos(int pos) {
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }
    Node* temp = head;
    Node* prev = NULL;
    if (pos == 1) {
        deleteAtBeg();
    } else {
        for (int i = 1; i < pos && temp->next != head; i++) {
            prev = temp;
            temp = temp->next;
        }
        if (temp == head) {
            printf("Invalid position\n");
            return;
        }
        prev->next = temp->next;
        free(temp);
    }
}

void deleteAtEnd() {
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }
    Node* temp = head;
    Node* prev = NULL;
    while (temp->next != head) {
        prev = temp;
        temp = temp->next;
    }
    if (temp == head) {
        head = NULL;
    } else {
        prev->next = head;
    }
    free(temp);
}

void display() {
    Node* temp = head;
    if (temp == NULL) {
        printf("List is empty\n");
        return;
    }
    printf("Circular Linked List: ");
    do {
        printf("%d->", temp->value);
        temp = temp->next;
    } while (temp != head);
    printf("\n");
}

int main() {
    insertAtBeg(30);
    insertAtBeg(350);
    insertAtBeg(10);
    insertAtBeg(40);
    insertAtPos(40, 2);
    deleteAtPos(3);
    deleteAtBeg();
    insertAtEnd(99);
    deleteAtEnd();
    
    display();
    return 0;
}



// circualar doubly linked list ----------------------------------------------
#include <stdio.h>
#include <stdlib.h>

struct Node{
  int value;
  struct Node* next;
};

typedef struct Node n;

n *head = NULL;

n* createNode(int val){
    n* newnode;
    newnode = (n*)malloc(sizeof(n));
    newnode->next = NULL;
    newnode->value = val;
    return newnode;
}

void insertAtBeg(int val){
    n* newnode = createNode(val);
    if (head == NULL){
        head = newnode;
        return;
    }
    newnode->next = head;
    head = newnode;
}

void display (){
    n *temp = head;
    
    while(temp != NULL){
        printf("%d->",temp->value);
        temp = temp->next;
    }
    printf("NULL\n");
}

void insertAtEnd(int val){
    n* newnode = createNode(val);
    if (head == NULL){
        head = newnode;
        return;
    }
    n* temp = head;
    while(temp->next != NULL){
        temp = temp->next;
    }
    temp->next = newnode;
}

void deleteAtBeg(){
    if (head == NULL){
        printf("List is empty. Cannot delete.\n");
        return;
    }
    n* temp = head;
    head = head->next;
    free(temp);
}

void deleteAtEnd(){
    if (head == NULL){
        printf("List is empty. Cannot delete.\n");
        return;
    }
    n* temp = head;
    n* prev = NULL;
    while(temp->next != NULL){
        prev = temp;
        temp = temp->next;
    }
    if (prev != NULL){
        prev->next = NULL;
        free(temp);
    } else {
        free(head);
        head = NULL;
    }
}

int main() {
    insertAtBeg(10);
    insertAtBeg(30);
    insertAtBeg(20);
    insertAtBeg(11);
    printf("Initial list:\n");
    display();
    
    printf("\nAfter inserting 25 at the end:\n");
    insertAtEnd(25);
    display();
    
    printf("\nAfter deleting from the beginning:\n");
    deleteAtBeg();
    display();
    
    printf("\nAfter deleting from the end:\n");
    deleteAtEnd();
    display();
    
    return 0;
}


//stack------------------------------------------------------------------------


#include <stdio.h>
#define MAX 50
#include <stdbool.h>

int Arr[MAX];
int tos = -1;



bool isEmpty(){
    return (tos == -1);
}

bool isFull(){
    
    return (tos == MAX-1);
}


int push(int val){
    if(isFull()){
        printf("The stack is full");
        return -1;
    }
    tos++;
    Arr[tos] = val;
}
int pop (){
       if(isEmpty()){
        printf("The stack is empty");
        return -1;
    }
    tos--;
}


void display(){
    for (int i = 0 ; i <= tos ; i++){
        printf("%d\n",Arr[i]);
    }
    return;
}

int main() {
    push(20);
    push(60);
    pop();
    push(220);
    push(10);
    display();
    return 0;
}	

//queue------------------------------------------------------------------------

